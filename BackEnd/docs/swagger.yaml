basePath: /
definitions:
  Admin.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  Bookings.BookingResponse:
    properties:
      booking_id:
        type: integer
      booking_status:
        type: string
      court_name:
        type: string
      slot_time:
        type: string
      sport_name:
        type: string
    type: object
  Court.CourtCreationResponse:
    properties:
      court:
        $ref: '#/definitions/DataBase.Court'
      message:
        type: string
    type: object
  Court.CourtData:
    properties:
      court_name:
        type: string
      sport_name:
        type: string
    type: object
  DataBase.Bookings:
    properties:
      Booking_ID:
        type: integer
      Booking_Status:
        type: string
      Booking_Time:
        type: integer
      Court_ID:
        type: integer
      Customer_ID:
        type: integer
      Sport_ID:
        type: integer
      court:
        $ref: '#/definitions/DataBase.Court'
      customer:
        $ref: '#/definitions/DataBase.Customer'
      sport:
        $ref: '#/definitions/DataBase.Sport'
    type: object
  DataBase.CancelRequest:
    properties:
      Booking_ID:
        type: integer
    type: object
  DataBase.Court:
    properties:
      Court_ID:
        type: integer
      Court_Location:
        type: string
      Court_Name:
        type: string
      Court_Status:
        type: integer
      Sport_id:
        type: integer
      court_Capacity:
        type: integer
      sport:
        $ref: '#/definitions/DataBase.Sport'
    type: object
  DataBase.CourtAvailability:
    properties:
      CourtID:
        type: integer
      CourtName:
        type: string
      CourtStatus:
        type: integer
      Slots:
        items:
          type: integer
        type: array
    type: object
  DataBase.CourtUpdate:
    properties:
      Court_ID:
        type: integer
      Court_Name:
        type: string
      Customer_email:
        type: string
      Slot_Index:
        type: integer
      Sport_ID:
        type: string
      Sport_name:
        type: string
    type: object
  DataBase.Customer:
    properties:
      Contact:
        type: string
      Customer_ID:
        type: integer
      email:
        type: string
      name:
        type: string
    type: object
  DataBase.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  DataBase.Sport:
    properties:
      Sport_ID:
        type: integer
      Sport_name:
        type: string
      sport_Description:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing court bookings
  title: Court Booking API
  version: "1.0"
paths:
  /AdminLogin:
    post:
      consumes:
      - application/json
      description: Validates admin credentials (plain text match)
      parameters:
      - description: Admin credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/Admin.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Admin login
      tags:
      - admins
  /CancelBookingandUpdateSlot:
    put:
      consumes:
      - application/json
      description: Cancels a booking by updating its status to "Cancelled" and marks
        the corresponding time slot (based on Booking_Time) as available (sets it
        to 1) in the Court_TimeSlots record.
      parameters:
      - description: Cancel Booking Request
        in: body
        name: cancelRequest
        required: true
        schema:
          $ref: '#/definitions/DataBase.CancelRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: 'Booking cancelled and slot updated successfully for Booking_ID:
            123'
          schema:
            type: string
        "400":
          description: Invalid request body or Invalid Slot_Index
          schema:
            type: string
        "404":
          description: Booking not found or Court TimeSlots not found
          schema:
            type: string
        "500":
          description: Failed to start transaction, database error, or transaction
            commit failed
          schema:
            type: string
      summary: Cancel a booking and update court time slot
      tags:
      - courts
  /CreateBooking:
    post:
      consumes:
      - application/json
      description: Creates a new booking after validating the existence of the customer,
        sport, and court.
      parameters:
      - description: Booking data
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/DataBase.Bookings'
      produces:
      - application/json
      responses:
        "201":
          description: Booking record added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
        "404":
          description: Customer, sport, or court not found
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
      summary: Create a new booking
      tags:
      - bookings
  /CreateCourt:
    post:
      consumes:
      - application/json
      description: Creates a new court and assigns time slots for bookings
      parameters:
      - description: Court data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/DataBase.Court'
      produces:
      - application/json
      responses:
        "201":
          description: Court created successfully
          schema:
            $ref: '#/definitions/Court.CourtCreationResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create court
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new court with associated time slots
      tags:
      - courts
  /CreateSport:
    post:
      consumes:
      - application/json
      description: Adds a new sport to the database if it does not already exist.
        Requires Sport_name as input.
      parameters:
      - description: Sport object
        in: body
        name: sport
        required: true
        schema:
          $ref: '#/definitions/DataBase.Sport'
      produces:
      - application/json
      responses:
        "201":
          description: 'Sport record added successfully"  example({"message": "Sport
            record added successfully!!", "sport": {"Sport_ID": 1, "Sport_name": "Tennis"}})'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Sport_name is required or the sport already exists or invalid
            request body
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new sport record
      tags:
      - sports
  /Customer:
    post:
      consumes:
      - application/json
      description: Adds a new customer to the database if they do not already exist.
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/DataBase.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: Customer already exists
        "201":
          description: Customer record added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
        "500":
          description: Internal server error
      summary: Create a new customer
      tags:
      - customers
  /DeleteCourt:
    delete:
      consumes:
      - application/json
      description: Deletes a court record from the database based on the court name.
      parameters:
      - description: Court Name to be deleted
        in: query
        name: court_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Court deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid court name
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Court not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a court record
      tags:
      - courts
  /ListCourts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all courts along with the corresponding sport
        names.
      produces:
      - application/json
      responses:
        "200":
          description: 'List of courts and their associated sports"  example([{"court_name":
            "Court A", "sport_name": "Tennis"}, {"court_name": "Court B", "sport_name":
            "Basketball"}])'
          schema:
            items:
              $ref: '#/definitions/Court.CourtData'
            type: array
        "500":
          description: Database error while fetching courts
          schema:
            type: string
      summary: List all courts with their associated sports
      tags:
      - courts
  /ListSports:
    get:
      description: Fetches all sports names from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of sport names
          schema:
            items:
              type: string
            type: array
        "500":
          description: Failed to fetch sports
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a list of sports
      tags:
      - sports
  /UpdateCourtSlotandBooking:
    put:
      consumes:
      - application/json
      description: Toggles the availability of a court time slot and, based on the
        provided customer email and sport name,
      parameters:
      - description: Court slot update request including Customer_email and Sport_name
        in: body
        name: updateRequest
        required: true
        schema:
          $ref: '#/definitions/DataBase.CourtUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: 'Slot updated and booking created successfully for Court_ID:
            {Court_ID}, Slot_Index: {Slot_Index}'
          schema:
            type: string
        "400":
          description: Invalid request body or Slot_Index out of range
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
        "404":
          description: Court time slots, Customer, or Sport not found
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
        "500":
          description: Database error or failed to update slot/booking
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
      summary: Update court slot and create booking
      tags:
      - courts
  /getCourts:
    get:
      consumes:
      - application/json
      description: Fetches courts based on the selected sport and provides their availability
        status along with time slots.
      parameters:
      - description: Sport name
        in: query
        name: sport
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of available courts with time slots
          schema:
            items:
              $ref: '#/definitions/DataBase.CourtAvailability'
            type: array
        "400":
          description: Missing 'sport' query parameter
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
        "404":
          description: Sport not found or no courts available
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
      summary: Get court availability
      tags:
      - courts
  /listBookings:
    get:
      consumes:
      - application/json
      description: Retrieves a list of bookings for a customer by email. Returns booking
        details including court name, sport name, slot time, and booking status.
      parameters:
      - default: john@example.com
        description: Customer email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of bookings for the customer"  example([{"booking_id":1,"court_name":"Court
            A","sport_name":"Tennis","slot_time":"10-11 AM","booking_status":"Confirmed"}])
          schema:
            items:
              $ref: '#/definitions/Bookings.BookingResponse'
            type: array
        "400":
          description: Email query parameter is required
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
        "500":
          description: Database error while fetching bookings
          schema:
            type: string
      summary: List bookings for a customer
      tags:
      - bookings
  /resetCourtSlots:
    put:
      consumes:
      - application/json
      description: Sets every slot (08‑18h) back to **available** (value `1`) for
        every court whose `court_status == 1`.<br>
      parameters:
      - description: Reset a single court by name
        example: '"Court A"'
        in: query
        name: court_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Slots reset successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Database error while updating slots
          schema:
            $ref: '#/definitions/DataBase.ErrorResponse'
      summary: Reset all time‑slots for available courts
      tags:
      - courts
swagger: "2.0"
