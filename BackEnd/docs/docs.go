// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/CreateBooking": {
            "post": {
                "description": "Creates a new booking after validating the existence of the customer, sport, and court.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Create a new booking",
                "parameters": [
                    {
                        "description": "Booking data",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataBase.Bookings"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Booking record added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer, sport, or court not found",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/Customer": {
            "post": {
                "description": "Adds a new customer to the database if they do not already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "Customer data",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataBase.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer already exists"
                    },
                    "201": {
                        "description": "Customer record added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/UpdateCourtSlot": {
            "put": {
                "description": "Toggles the availability of a court time slot. If the slot is booked, it is freed; if it is free, it is booked.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courts"
                ],
                "summary": "Update court slot status",
                "parameters": [
                    {
                        "description": "Court slot update request",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataBase.CourtUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Slot updated successfully for Court_ID: {Court_ID}, Slot_Index: {Slot_Index}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or Slot_Index out of range",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Court time slots not found",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error or failed to update slot",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getCourts": {
            "get": {
                "description": "Fetches courts based on the selected sport and provides their availability status along with time slots.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courts"
                ],
                "summary": "Get court availability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport name",
                        "name": "sport",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available courts with time slots",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DataBase.CourtAvailability"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing 'sport' query parameter",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Sport not found or no courts available",
                        "schema": {
                            "$ref": "#/definitions/DataBase.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "DataBase.Bookings": {
            "type": "object",
            "properties": {
                "Booking_ID": {
                    "type": "integer"
                },
                "Booking_Status": {
                    "type": "string"
                },
                "Booking_Time": {
                    "type": "string"
                },
                "Court_ID": {
                    "type": "integer"
                },
                "Customer_ID": {
                    "type": "integer"
                },
                "Sport_ID": {
                    "type": "integer"
                },
                "court": {
                    "$ref": "#/definitions/DataBase.Court"
                },
                "customer": {
                    "$ref": "#/definitions/DataBase.Customer"
                },
                "sport": {
                    "$ref": "#/definitions/DataBase.Sport"
                }
            }
        },
        "DataBase.Court": {
            "type": "object",
            "properties": {
                "Court_ID": {
                    "type": "integer"
                },
                "Court_Location": {
                    "type": "string"
                },
                "Court_Name": {
                    "type": "string"
                },
                "Court_Status": {
                    "type": "integer"
                },
                "Sport_id": {
                    "type": "integer"
                },
                "court_Capacity": {
                    "type": "integer"
                },
                "sport": {
                    "$ref": "#/definitions/DataBase.Sport"
                }
            }
        },
        "DataBase.CourtAvailability": {
            "type": "object",
            "properties": {
                "CourtID": {
                    "type": "integer"
                },
                "CourtName": {
                    "type": "string"
                },
                "CourtStatus": {
                    "type": "integer"
                },
                "Slots": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "DataBase.CourtUpdate": {
            "type": "object",
            "properties": {
                "Court_ID": {
                    "type": "integer"
                },
                "Court_Name": {
                    "type": "string"
                },
                "Customer_ID": {
                    "type": "integer"
                },
                "Slot_Index": {
                    "type": "integer"
                },
                "Sport_name": {
                    "type": "string"
                }
            }
        },
        "DataBase.Customer": {
            "type": "object",
            "properties": {
                "Contact": {
                    "type": "string"
                },
                "Customer_ID": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "DataBase.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "DataBase.Sport": {
            "type": "object",
            "properties": {
                "Sport_ID": {
                    "type": "integer"
                },
                "Sport_name": {
                    "type": "string"
                },
                "sport_Description": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Court Booking API",
	Description:      "API for managing court bookings",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
